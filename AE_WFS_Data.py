# -*- coding: utf-8 -*-
# Korto19 - Febbraio 2025
"""
***************************************************************************
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU General Public License as published by  *
*   the Free Software Foundation; either version 2 of the License, or     *
*   (at your option) any later version.                                   *
*                                                                         *
***************************************************************************
"""

from qgis.gui import QgsMapTool, QgsMapToolEmitPoint
from qgis.utils import iface
from PyQt5.QtCore import QCoreApplication, QVariant
from qgis.core import (Qgis,
                       QgsField,
                       QgsFields,
                       QgsWkbTypes,
                       QgsProject,
                       QgsPrintLayout,
                       QgsLayoutPoint,
                       QgsPointXY,
                       QgsLayoutSize,
                       QgsUnitTypes,
                       QgsLayoutItemPage,
                       QgsLayoutItemMap,
                       QgsLayoutItemLabel,
                       QgsVectorLayer,
                       QgsFeature,
                       QgsGeometry,
                       QgsProcessing,
                       QgsFeatureSink,
                       QgsFeatureRequest,
                       QgsProcessingParameterExtent,
                       QgsProcessingParameterPoint,
                       QgsProcessingException,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterMapLayer,
                       QgsCoordinateReferenceSystem)
from qgis import processing
from pathlib import Path
from PyQt5.QtWidgets import QApplication

import requests
import json

from PyQt5 import QtGui, QtCore
import base64

#questo per l'icona dell'algoritmo di processing
import os
import inspect
from qgis.PyQt.QtGui import QIcon
cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

p_icon = b''

class AE_WFS_DataAlgorithm(QgsProcessingAlgorithm):
    """
    This is a test algorithm 

    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT  = 'INPUT'    #input data layer
    OUTPUT = 'OUTPUT'

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return AE_WFS_DataAlgorithm()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'AE WFS - Dati Catastali'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('AE WFS - Dati Catastali')
    
    #icona dell'algoritmo di processing
    def icon(self):
        pixmap = QtGui.QPixmap()
        pixmap.loadFromData(QtCore.QByteArray.fromBase64(p_icon))
        icon = QIcon(pixmap)
        return icon
    
    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        # header = '''
        #             <img src="'''+ os.path.join(os.path.join(cmd_folder, 'ae.png')) + '''" width="50" height="50" style="float:right">
        # '''
        
        header = '''<img src="data:image/svg;base64,''' + str(p_icon,'utf-8') + ''' width="80" height="80" style="float:right">'''
        
        return self.tr(header + "Operando con il layer particelle dal WFS dell Agenzia delle Entrate\
                        costruisce un vettore poligonale i cui elementi hanno come attributi i dati del\
                        mappale del punto inserito\n\
                        E' possibile aggiungere dati ad un vettore già creato purche'\
                        abbia gli stessi campi e sia caricato nella Toc\n\
                        <b>Se non già presente, alla prima esecuzione e' necessario fargli creare il vettore\
                        lasciando vuoto il primo campo in maschera che serve solo in caso di aggiunta</b>\n\
                        Se non specificato diversamente il nuovo vettore sarà nominato Mappali\n\
                        <strong><mark style='color:black'>UTILIZZO</strong>\n\
                        - lanciare l'algoritmo di processing e settare i parametri\n\
                        - click su Esegui\n\
                        - <strong>il cursore diventera' una crocetta con cui selezionare i punti</strong>\n\
                        - al termine click destro per arrestare la procedura\n\
                        - chiudere il plugin\n\
                         <strong><mark style='color:red'>AVVERTENZE</strong>\n\
                        <mark style='color:red'>Il plugin imposta il CRS di progetto a WGS:\n\
                        <strong><mark style='color:green'> 4326 - WGS84<\strong>\n\
                        <mark style='color:red'>L'algoritmo non risolve con sistemi metrici"
                    )

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        
        self.addParameter(
            QgsProcessingParameterMapLayer(
                self.INPUT,
                self.tr('Layer Mappali caricato a cui aggiungere'),
                defaultValue=None,
                optional = True,
                types=[QgsProcessing.TypeVectorPolygon]
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Mappali'),
                optional = True,
                createByDefault = True
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        
        # This line makes the difference
        QApplication.instance().processEvents()
        # This sets the project CRS to 25832
        QgsProject.instance().setCrs(QgsCoordinateReferenceSystem(4326))
        
        input_layer = self.parameterAsLayer(
            parameters,
            self.INPUT,
            context)
            
        crs = self.parameterAsPointCrs(
            parameters,
            self.INPUT,
            context)
           
        output_layer = self.parameterAsFileOutput(
            parameters,
            self.OUTPUT,
            context)
        
        if not input_layer:
            
            if output_layer == 'memory:Mappali':
                nome_file = 'Mappali'
            else:
                nome_file = Path(output_layer).stem
                
            # print(output_layer, nome_file)
            
            fields = QgsFields()
            fields.append(QgsField("INSPIREID_LOCALID", QVariant.String)),
            fields.append(QgsField("INSPIREID_NAMESPACE", QVariant.String)),
            fields.append(QgsField("LABEL", QVariant.String)),
            fields.append(QgsField("NATIONALCADASTRALREFERENCE", QVariant.String)),
            fields.append(QgsField("ADMINISTRATIVEUNIT", QVariant.String)),
            # fields.append(QgsField("AREAVALUE", QVariant.String)),
            # fields.append(QgsField("BEGINLIFESPANVERSION", QVariant.String)),
            # fields.append(QgsField("ENDLIFESPANVERSION", QVariant.String));
            # fields.append(QgsField("QUALITY", QVariant.String))
            # fields.append(QgsField("SOURCE", QVariant.String))
        
            (label, dest_id) = self.parameterAsSink(
                parameters,
                self.OUTPUT,
                context, fields, QgsWkbTypes.Polygon, crs
            )
            
        else:
            nome_file = input_layer.name()
        
        # print('SETTATO SU: ' + nome_file + ' - ' +iface.activeLayer().crs().authid() + '\n')
       
        """
        Here is where the processing itself takes place.
        """
              
        class MapTool(QgsMapTool):
            def __init__(self, iface, canvas):
                super(MapTool, self).__init__(canvas)

            def canvasReleaseEvent(self, event):
                if event.button() == 1:
                    wgs84_point = self.toMapCoordinates(event.pos())
                    epsg = crs.authid()
                    
                    try:
                        particelle, layer = query_catasto_point(wgs84_point.x(), wgs84_point.y())
                        if particelle:
                            feedback.pushInfo("\nRisultati della ricerca:")
                            for i, particella in enumerate(particelle):
                                print_feature_details(particella, i)
                        else:
                            print("\nNessuna particella trovata in quel punto")
                    
                    except Exception as e:
                        feedback.reportError(f"\nErrore durante la query: {str(e)}")
                        feedback.reportError("\nControlla:")
                        feedback.reportError("1. La connessione internet")
                        feedback.reportError("2. L'accessibilità del servizio WFS del Catasto")
                        feedback.reportError("3. La validità delle credenziali (se richieste)")
                
                else:
                    iface.mapCanvas().unsetMapTool(tool)

        def query_catasto_point(x, y, create_layer=True):
            """
            Interroga il WFS del Catasto per un punto specificato e crea opzionalmente un layer
            Args:
                x (float): Longitudine del punto (WGS84)
                y (float): Latitudine del punto (WGS84)
                create_layer (bool): Se True, crea un layer vettoriale con i risultati
            """
            
            # URL base del servizio WFS catastale con tutti i parametri necessari
            base_url = 'https://wfs.cartografia.agenziaentrate.gov.it/inspire/wfs/owfs01.php'
            
            # Costruzione dell'URI con parametri verificati
            uri = (f"pagingEnabled='true' "
                   f"preferCoordinatesForWfsT11='false' "
                   f"restrictToRequestBBOX='1' "
                   f"srsname='EPSG:6706' "
                   f"typename='CP:CadastralParcel' "
                   f"url='{base_url}' "
                   f"version='2.0.0' "
                   f"language='ita'")
            
            # print(f"\nInizio query per il punto ({x}, {y})")
            
            # Carica il layer WFS
            wfs_layer = QgsVectorLayer(uri, "catasto_query", "WFS")
            
            if not wfs_layer.isValid():
                error_msg = wfs_layer.dataProvider().error().message() if wfs_layer.dataProvider() else "Nessun dettaglio disponibile"
                raise Exception(f"Layer non valido. Dettagli: {error_msg}")
            
            feedback.pushInfo("Layer WFS caricato con successo")
            
            # Crea il filtro spaziale
            point = QgsGeometry.fromPointXY(QgsPointXY(x, y))
            
            # Imposta una request con il filtro spaziale
            request = QgsFeatureRequest().setFilterRect(point.boundingBox())
            
            # Recupera le features
            features = list(wfs_layer.getFeatures(request))
            feedback.pushInfo(f"Features trovate: {len(features)}")
            
             # Aggiungi le features al nuovo layer
            vl = QgsProject.instance().mapLayersByName(nome_file)[0]
            vl.startEditing()
            for feat in features:
                new_feat = QgsFeature(vl.fields())
                new_feat.setGeometry(feat.geometry())
                # Copia gli attributi
                for field in wfs_layer.fields():
                    new_feat[field.name()] = feat[field.name()]
                (res, outFeats) = vl.dataProvider().addFeatures([new_feat])
                vl.addFeature(new_feat)
        
            vl.commitChanges()
            
            return features, None
            
            
        def print_feature_details(feature, index):
            """
            Stampa i dettagli di una feature in modo formattato
            """
            feedback.pushInfo(f"\nParticella {index + 1}:")
            feedback.pushInfo("-" * 50)
            
            # Dizionario per tradurre i nomi dei campi
            field_translations = {
                'INSPIREID_LOCALID': 'ID Locale',
                'INSPIREID_NAMESPACE': 'Namespace',
                'LABEL': 'Etichetta',
                'NATIONALCADASTRALREFERENCE': 'Riferimento Catastale',
                'ADMINISTRATIVEUNIT': 'Unità Amministrativa',
                'AREAVALUE': 'Superficie (mq)',
                'BEGINLIFESPANVERSION': 'Data di inizio validità',
                'ENDLIFESPANVERSION': 'Data di fine validità',
                'QUALITY': 'Qualità',
                'SOURCE': 'Fonte'
            }
            
            for field_name in feature.fields().names():
                value = feature[field_name]
                if value:  # Stampa solo i campi non vuoti
                    display_name = field_translations.get(field_name, field_name)
                    feedback.pushInfo(f"{display_name}: {value}")
            feedback.pushInfo("-" * 50)
    
            return
        
        
        
        tool = MapTool(iface, iface.mapCanvas())
        iface.mapCanvas().setMapTool(tool)
        
        return {self.OUTPUT: None}